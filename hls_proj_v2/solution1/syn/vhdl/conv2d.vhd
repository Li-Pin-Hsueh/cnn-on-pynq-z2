-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_filter_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_filter_TVALID : IN STD_LOGIC;
    stream_filter_TREADY : OUT STD_LOGIC;
    stream_filter_TLAST : IN STD_LOGIC;
    stream_input_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_input_TVALID : IN STD_LOGIC;
    stream_input_TREADY : OUT STD_LOGIC;
    stream_input_TLAST : IN STD_LOGIC;
    stream_output_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_output_TVALID : OUT STD_LOGIC;
    stream_output_TREADY : IN STD_LOGIC;
    stream_output_TLAST : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=33,HLS_SYN_DSP=5,HLS_SYN_FF=1575,HLS_SYN_LUT=2581,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal input_size : STD_LOGIC_VECTOR (31 downto 0);
    signal input_number : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_number : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_filter_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln30_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_nbreadreq_fu_118_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_input_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln42_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_nbreadreq_fu_136_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_output_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln63_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal filter_number_read_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_number_read_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_size_read_reg_987 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_fu_430_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal count_reg_997 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln32_fu_458_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln32_reg_1002 : STD_LOGIC_VECTOR (34 downto 0);
    signal icmp_ln27_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_fu_473_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_reg_1017 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln32_1_fu_504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln32_1_reg_1022 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln28_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_516_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_reg_1030 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln32_2_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln32_2_reg_1035 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln29_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_559_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op104_read_state5 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal count_2_fu_602_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal count_2_reg_1054 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal map_boundary_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal map_boundary_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_3_fu_619_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_3_reg_1068 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_5_fu_625_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1073 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln40_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_4_fu_642_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_4_reg_1081 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_8_cast_fu_661_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_cast_reg_1086 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln41_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_3_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op148_read_state9 : BOOLEAN;
    signal ap_block_state9 : BOOLEAN;
    signal input_count_fu_717_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal input_count_reg_1105 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal regslice_both_stream_output_V_data_U_apdone_blk : STD_LOGIC;
    signal filter_count_fu_732_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal filter_count_reg_1113 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sext_ln67_fu_760_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln67_reg_1118 : STD_LOGIC_VECTOR (34 downto 0);
    signal icmp_ln57_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_3_fu_773_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_3_reg_1126 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal col_4_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_4_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal channel_4_fu_796_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal channel_4_reg_1142 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state14_io : BOOLEAN;
    signal zext_ln67_4_fu_814_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln67_4_reg_1147 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln67_1_fu_839_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln67_1_reg_1152 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_855_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_reg_1165 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_13_cast_fu_880_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_cast_reg_1170 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln65_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln67_2_fu_913_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln67_2_reg_1175 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_fu_925_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_reg_1183 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln66_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_load_reg_1198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal filter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_load_reg_1203 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal input_0_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_0_ce0 : STD_LOGIC;
    signal input_0_we0 : STD_LOGIC;
    signal filter_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal filter_ce0 : STD_LOGIC;
    signal filter_we0 : STD_LOGIC;
    signal count_0_reg_202 : STD_LOGIC_VECTOR (30 downto 0);
    signal channel_0_reg_213 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_0_reg_224 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_0_reg_235 : STD_LOGIC_VECTOR (1 downto 0);
    signal count_1_reg_246 : STD_LOGIC_VECTOR (30 downto 0);
    signal channel_1_reg_257 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_1_reg_268 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_1_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_count_0_reg_290 : STD_LOGIC_VECTOR (30 downto 0);
    signal filter_count_0_reg_301 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln60_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_2_reg_312 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln61_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_2_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_2_reg_336 : STD_LOGIC_VECTOR (1 downto 0);
    signal axi_tmp_data_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_0_reg_361 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_0_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_0_reg_384 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_1_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_5_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_7_fu_950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_9_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_last_fu_84 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_1_fu_96 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_407_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln27_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_440_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln32_1_fu_448_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln32_fu_436_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln32_fu_452_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln32_3_fu_479_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln32_fu_483_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_3_fu_492_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln32_2_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_1_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_2_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_1_fu_526_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_1_fu_535_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_539_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_531_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_4_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_2_fu_578_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln39_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln41_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln44_fu_652_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln44_fu_648_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln44_fu_655_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln44_1_fu_689_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln44_1_fu_693_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln56_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln57_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_742_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln67_1_fu_750_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln67_fu_738_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln67_fu_754_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln60_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_806_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln67_3_fu_802_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln67_fu_818_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_4_fu_827_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln67_2_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln67_1_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln67_fu_865_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln67_5_fu_861_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln67_1_fu_869_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln67_2_fu_875_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln67_2_fu_888_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_3_fu_892_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln67_2_fu_901_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_905_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_1_fu_897_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_3_fu_935_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln67_6_fu_931_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln67_4_fu_939_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln67_5_fu_945_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln67_8_fu_955_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln67_6_fu_959_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal stream_output_TVALID_int : STD_LOGIC;
    signal stream_output_TREADY_int : STD_LOGIC;
    signal regslice_both_stream_output_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_stream_output_V_last_U_apdone_blk : STD_LOGIC;
    signal stream_output_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_stream_output_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_stream_output_V_last_U_vld_out : STD_LOGIC;

    component conv2d_fadd_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_fmul_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_input_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_filter IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_number : OUT STD_LOGIC_VECTOR (31 downto 0);
        filter_number : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    conv2d_AXILiteS_s_axi_U : component conv2d_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_size => input_size,
        input_number => input_number,
        filter_number => filter_number);

    input_0_U : component conv2d_input_0
    generic map (
        DataWidth => 32,
        AddressRange => 12288,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_0_address0,
        ce0 => input_0_ce0,
        we0 => input_0_we0,
        d0 => stream_input_TDATA,
        q0 => input_0_q0);

    filter_U : component conv2d_filter
    generic map (
        DataWidth => 32,
        AddressRange => 81,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => filter_address0,
        ce0 => filter_ce0,
        we0 => filter_we0,
        d0 => stream_filter_TDATA,
        q0 => filter_q0);

    conv2d_fadd_32ns_bkb_U1 : component conv2d_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_407_p0,
        din1 => grp_fu_407_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_407_p2);

    conv2d_fmul_32ns_cud_U2 : component conv2d_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input_0_load_reg_1198,
        din1 => filter_load_reg_1203,
        ce => ap_const_logic_1,
        dout => grp_fu_414_p2);

    regslice_both_stream_output_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axi_tmp_data_reg_347,
        vld_in => stream_output_TVALID_int,
        ack_in => stream_output_TREADY_int,
        data_out => stream_output_TDATA,
        vld_out => regslice_both_stream_output_V_data_U_vld_out,
        ack_out => stream_output_TREADY,
        apdone_blk => regslice_both_stream_output_V_data_U_apdone_blk);

    regslice_both_w1_stream_output_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_output_TLAST_int,
        vld_in => stream_output_TVALID_int,
        ack_in => regslice_both_w1_stream_output_V_last_U_ack_in_dummy,
        data_out => stream_output_TLAST,
        vld_out => regslice_both_w1_stream_output_V_last_U_vld_out,
        ack_out => stream_output_TREADY,
        apdone_blk => regslice_both_w1_stream_output_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    axi_tmp_data_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_779_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                axi_tmp_data_reg_347 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                axi_tmp_data_reg_347 <= grp_fu_407_p2;
            end if; 
        end if;
    end process;

    channel_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                channel_0_reg_213 <= channel_reg_1017;
            elsif (((icmp_ln27_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                channel_0_reg_213 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    channel_1_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_597_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                channel_1_reg_257 <= ap_const_lv2_0;
            elsif (((icmp_ln41_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                channel_1_reg_257 <= channel_3_reg_1068;
            end if; 
        end if;
    end process;

    channel_2_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_779_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                channel_2_reg_336 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                channel_2_reg_336 <= channel_4_reg_1142;
            end if; 
        end if;
    end process;

    col_0_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_0_reg_235 <= ap_const_lv2_0;
            elsif ((not(((ap_predicate_op104_read_state5 = ap_const_boolean_1) and (stream_filter_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_118_p4 = ap_const_lv1_1) and (icmp_ln30_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                col_0_reg_235 <= col_fu_559_p2;
            end if; 
        end if;
    end process;

    col_1_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                col_1_reg_279 <= ap_const_lv32_0;
            elsif ((not(((ap_predicate_op148_read_state9 = ap_const_boolean_1) and (stream_input_TVALID = ap_const_logic_0))) and (tmp_1_nbreadreq_fu_136_p4 = ap_const_lv1_1) and (icmp_ln42_fu_669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                col_1_reg_279 <= col_3_fu_674_p2;
            end if; 
        end if;
    end process;

    col_2_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                col_2_reg_324 <= ap_const_lv32_0;
            elsif (((stream_output_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                col_2_reg_324 <= col_4_reg_1134;
            end if; 
        end if;
    end process;

    count_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_467_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                count_0_reg_202 <= count_reg_997;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                count_0_reg_202 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    count_1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                count_1_reg_246 <= count_2_reg_1054;
            elsif (((icmp_ln27_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                count_1_reg_246 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    filter_count_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_712_p2 = ap_const_lv1_1) and (regslice_both_stream_output_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                filter_count_0_reg_301 <= ap_const_lv31_0;
            elsif (((icmp_ln60_fu_768_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                filter_count_0_reg_301 <= filter_count_reg_1113;
            end if; 
        end if;
    end process;

    input_count_0_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_727_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                input_count_0_reg_290 <= input_count_reg_1105;
            elsif (((icmp_ln39_fu_597_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                input_count_0_reg_290 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    m_0_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_919_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                m_0_reg_361 <= m_reg_1165;
            elsif (((icmp_ln63_fu_790_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                m_0_reg_361 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_0_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_849_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                n_0_reg_384 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                n_0_reg_384 <= n_reg_1183;
            end if; 
        end if;
    end process;

    row_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_0_reg_224 <= ap_const_lv2_0;
            elsif ((not(((ap_predicate_op104_read_state5 = ap_const_boolean_1) and (stream_filter_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_nbreadreq_fu_118_p4 = ap_const_lv1_0) or (icmp_ln30_fu_553_p2 = ap_const_lv1_1)))) then 
                row_0_reg_224 <= row_reg_1030;
            end if; 
        end if;
    end process;

    row_1_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                row_1_reg_268 <= ap_const_lv31_0;
            elsif ((not(((ap_predicate_op148_read_state9 = ap_const_boolean_1) and (stream_input_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and ((tmp_1_nbreadreq_fu_136_p4 = ap_const_lv1_0) or (icmp_ln42_fu_669_p2 = ap_const_lv1_0)))) then 
                row_1_reg_268 <= row_4_reg_1081;
            end if; 
        end if;
    end process;

    row_2_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_779_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                row_2_reg_312 <= row_3_reg_1126;
            elsif (((icmp_ln57_fu_727_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                row_2_reg_312 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    tmp_last_1_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op148_read_state9 = ap_const_boolean_1) and (stream_input_TVALID = ap_const_logic_0))) and (tmp_1_nbreadreq_fu_136_p4 = ap_const_lv1_1) and (icmp_ln42_fu_669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                tmp_last_1_fu_96 <= (0=>stream_input_TLAST, others=>'-');
            elsif (((icmp_ln27_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmp_last_1_fu_96 <= tmp_last_fu_84;
            end if; 
        end if;
    end process;

    x_0_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_919_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                x_0_reg_372 <= x_1_reg_395;
            elsif (((icmp_ln63_fu_790_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                x_0_reg_372 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_1_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_849_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                x_1_reg_395 <= x_0_reg_372;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                x_1_reg_395 <= grp_fu_407_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                channel_3_reg_1068 <= channel_3_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                channel_4_reg_1142 <= channel_4_fu_796_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                channel_reg_1017 <= channel_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                col_4_reg_1134 <= col_4_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                count_2_reg_1054 <= count_2_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                count_reg_997 <= count_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                filter_count_reg_1113 <= filter_count_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                filter_load_reg_1203 <= filter_q0;
                input_0_load_reg_1198 <= input_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                filter_number_read_reg_975 <= filter_number;
                input_number_read_reg_981 <= input_number;
                input_size_read_reg_987 <= input_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_stream_output_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                input_count_reg_1105 <= input_count_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                m_reg_1165 <= m_fu_855_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_597_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                map_boundary_reg_1059 <= map_boundary_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                n_reg_1183 <= n_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                row_3_reg_1126 <= row_3_fu_773_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                row_4_reg_1081 <= row_4_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                row_reg_1030 <= row_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sext_ln32_reg_1002 <= sext_ln32_fu_458_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_727_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                sext_ln67_reg_1118 <= sext_ln67_fu_760_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sub_ln32_1_reg_1022 <= sub_ln32_1_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sub_ln32_2_reg_1035 <= sub_ln32_2_fu_547_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_790_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                sub_ln67_1_reg_1152 <= sub_ln67_1_fu_839_p2;
                    zext_ln67_4_reg_1147(7 downto 6) <= zext_ln67_4_fu_814_p1(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_849_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                sub_ln67_2_reg_1175 <= sub_ln67_2_fu_913_p2;
                    tmp_13_cast_reg_1170(14 downto 6) <= tmp_13_cast_fu_880_p3(14 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_5_reg_1073(7 downto 6) <= tmp_5_fu_625_p3(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_6_reg_1208 <= grp_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_8_cast_reg_1086(14 downto 6) <= tmp_8_cast_fu_661_p3(14 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op104_read_state5 = ap_const_boolean_1) and (stream_filter_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_118_p4 = ap_const_lv1_1) and (icmp_ln30_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_last_fu_84 <= (0=>stream_filter_TLAST, others=>'-');
            end if;
        end if;
    end process;
    tmp_5_reg_1073(5 downto 0) <= "000000";
    tmp_8_cast_reg_1086(5 downto 0) <= "000000";
    zext_ln67_4_reg_1147(5 downto 0) <= "000000";
    zext_ln67_4_reg_1147(8) <= '0';
    tmp_13_cast_reg_1170(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (stream_filter_TVALID, stream_input_TVALID, ap_CS_fsm, ap_CS_fsm_state5, icmp_ln30_fu_553_p2, tmp_nbreadreq_fu_118_p4, ap_CS_fsm_state9, icmp_ln42_fu_669_p2, tmp_1_nbreadreq_fu_136_p4, ap_CS_fsm_state14, icmp_ln63_fu_790_p2, ap_CS_fsm_state31, ap_CS_fsm_state2, icmp_ln27_fu_425_p2, ap_CS_fsm_state3, icmp_ln28_fu_467_p2, ap_CS_fsm_state4, icmp_ln29_fu_510_p2, ap_predicate_op104_read_state5, ap_CS_fsm_state6, icmp_ln39_fu_597_p2, ap_CS_fsm_state7, icmp_ln40_fu_613_p2, ap_CS_fsm_state8, icmp_ln41_fu_637_p2, ap_predicate_op148_read_state9, ap_CS_fsm_state10, regslice_both_stream_output_V_data_U_apdone_blk, ap_CS_fsm_state11, icmp_ln57_fu_727_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_block_state14_io, ap_CS_fsm_state15, icmp_ln65_fu_849_p2, ap_CS_fsm_state16, icmp_ln66_fu_919_p2, icmp_ln60_fu_768_p2, icmp_ln56_fu_712_p2, icmp_ln61_fu_779_p2, stream_output_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln27_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln28_fu_467_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln29_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_predicate_op104_read_state5 = ap_const_boolean_1) and (stream_filter_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_nbreadreq_fu_118_p4 = ap_const_lv1_0) or (icmp_ln30_fu_553_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_predicate_op104_read_state5 = ap_const_boolean_1) and (stream_filter_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_118_p4 = ap_const_lv1_1) and (icmp_ln30_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln39_fu_597_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln40_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln41_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_predicate_op148_read_state9 = ap_const_boolean_1) and (stream_input_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and ((tmp_1_nbreadreq_fu_136_p4 = ap_const_lv1_0) or (icmp_ln42_fu_669_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not(((ap_predicate_op148_read_state9 = ap_const_boolean_1) and (stream_input_TVALID = ap_const_logic_0))) and (tmp_1_nbreadreq_fu_136_p4 = ap_const_lv1_1) and (icmp_ln42_fu_669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln56_fu_712_p2 = ap_const_lv1_0) and (regslice_both_stream_output_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln56_fu_712_p2 = ap_const_lv1_1) and (regslice_both_stream_output_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln57_fu_727_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln60_fu_768_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln61_fu_779_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln63_fu_790_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((icmp_ln63_fu_790_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln65_fu_849_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln66_fu_919_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state31 => 
                if (((stream_output_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln32_1_fu_526_p2 <= std_logic_vector(unsigned(sub_ln32_1_reg_1022) + unsigned(zext_ln32_2_fu_522_p1));
    add_ln32_2_fu_578_p2 <= std_logic_vector(unsigned(sub_ln32_2_reg_1035) + unsigned(zext_ln32_4_fu_574_p1));
    add_ln32_fu_483_p2 <= std_logic_vector(signed(sext_ln32_reg_1002) + signed(zext_ln32_3_fu_479_p1));
    add_ln44_1_fu_693_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_1086) + unsigned(trunc_ln44_1_fu_689_p1));
    add_ln44_fu_655_p2 <= std_logic_vector(unsigned(zext_ln44_fu_652_p1) + unsigned(trunc_ln44_fu_648_p1));
    add_ln67_1_fu_869_p2 <= std_logic_vector(unsigned(trunc_ln67_fu_865_p1) + unsigned(zext_ln67_5_fu_861_p1));
    add_ln67_2_fu_875_p2 <= std_logic_vector(unsigned(add_ln67_1_fu_869_p2) + unsigned(zext_ln67_4_reg_1147));
    add_ln67_3_fu_892_p2 <= std_logic_vector(unsigned(zext_ln67_2_fu_888_p1) + unsigned(sub_ln67_1_reg_1152));
    add_ln67_4_fu_939_p2 <= std_logic_vector(unsigned(trunc_ln67_3_fu_935_p1) + unsigned(zext_ln67_6_fu_931_p1));
    add_ln67_5_fu_945_p2 <= std_logic_vector(unsigned(add_ln67_4_fu_939_p2) + unsigned(tmp_13_cast_reg_1170));
    add_ln67_6_fu_959_p2 <= std_logic_vector(unsigned(zext_ln67_8_fu_955_p1) + unsigned(sub_ln67_2_reg_1175));
    add_ln67_fu_818_p2 <= std_logic_vector(unsigned(zext_ln67_3_fu_802_p1) + unsigned(sext_ln67_reg_1118));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state14_io_assign_proc : process(icmp_ln63_fu_790_p2, stream_output_TREADY_int)
    begin
                ap_block_state14_io <= ((icmp_ln63_fu_790_p2 = ap_const_lv1_1) and (stream_output_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(stream_filter_TVALID, ap_predicate_op104_read_state5)
    begin
                ap_block_state5 <= ((ap_predicate_op104_read_state5 = ap_const_boolean_1) and (stream_filter_TVALID = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(stream_input_TVALID, ap_predicate_op148_read_state9)
    begin
                ap_block_state9 <= ((ap_predicate_op148_read_state9 = ap_const_boolean_1) and (stream_input_TVALID = ap_const_logic_0));
    end process;


    ap_predicate_op104_read_state5_assign_proc : process(icmp_ln30_fu_553_p2, tmp_nbreadreq_fu_118_p4)
    begin
                ap_predicate_op104_read_state5 <= ((tmp_nbreadreq_fu_118_p4 = ap_const_lv1_1) and (icmp_ln30_fu_553_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op148_read_state9_assign_proc : process(icmp_ln42_fu_669_p2, tmp_1_nbreadreq_fu_136_p4)
    begin
                ap_predicate_op148_read_state9 <= ((tmp_1_nbreadreq_fu_136_p4 = ap_const_lv1_1) and (icmp_ln42_fu_669_p2 = ap_const_lv1_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    channel_3_fu_619_p2 <= std_logic_vector(unsigned(channel_1_reg_257) + unsigned(ap_const_lv2_1));
    channel_4_fu_796_p2 <= std_logic_vector(unsigned(channel_2_reg_336) + unsigned(ap_const_lv2_1));
    channel_fu_473_p2 <= std_logic_vector(unsigned(channel_0_reg_213) + unsigned(ap_const_lv2_1));
    col_3_fu_674_p2 <= std_logic_vector(unsigned(col_1_reg_279) + unsigned(ap_const_lv32_1));
    col_4_fu_784_p2 <= std_logic_vector(unsigned(col_2_reg_324) + unsigned(ap_const_lv32_1));
    col_fu_559_p2 <= std_logic_vector(unsigned(col_0_reg_235) + unsigned(ap_const_lv2_1));
    count_2_fu_602_p2 <= std_logic_vector(unsigned(count_1_reg_246) + unsigned(ap_const_lv31_1));
    count_fu_430_p2 <= std_logic_vector(unsigned(count_0_reg_202) + unsigned(ap_const_lv31_1));

    filter_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state16, zext_ln32_5_fu_583_p1, zext_ln67_9_fu_964_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            filter_address0 <= zext_ln67_9_fu_964_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            filter_address0 <= zext_ln32_5_fu_583_p1(7 - 1 downto 0);
        else 
            filter_address0 <= "XXXXXXX";
        end if; 
    end process;


    filter_ce0_assign_proc : process(stream_filter_TVALID, ap_CS_fsm_state5, ap_predicate_op104_read_state5, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (not(((ap_predicate_op104_read_state5 = ap_const_boolean_1) and (stream_filter_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            filter_ce0 <= ap_const_logic_1;
        else 
            filter_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_count_fu_732_p2 <= std_logic_vector(unsigned(filter_count_0_reg_301) + unsigned(ap_const_lv31_1));

    filter_we0_assign_proc : process(stream_filter_TVALID, ap_CS_fsm_state5, icmp_ln30_fu_553_p2, tmp_nbreadreq_fu_118_p4, ap_predicate_op104_read_state5)
    begin
        if ((not(((ap_predicate_op104_read_state5 = ap_const_boolean_1) and (stream_filter_TVALID = ap_const_logic_0))) and (tmp_nbreadreq_fu_118_p4 = ap_const_lv1_1) and (icmp_ln30_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            filter_we0 <= ap_const_logic_1;
        else 
            filter_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_407_p0_assign_proc : process(ap_CS_fsm_state15, axi_tmp_data_reg_347, x_1_reg_395, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_407_p0 <= x_1_reg_395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_407_p0 <= axi_tmp_data_reg_347;
        else 
            grp_fu_407_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_407_p1_assign_proc : process(ap_CS_fsm_state15, tmp_6_reg_1208, x_0_reg_372, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_407_p1 <= tmp_6_reg_1208;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_407_p1 <= x_0_reg_372;
        else 
            grp_fu_407_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln27_fu_425_p2 <= "1" when (signed(zext_ln27_fu_421_p1) < signed(filter_number_read_reg_975)) else "0";
    icmp_ln28_fu_467_p2 <= "1" when (channel_0_reg_213 = ap_const_lv2_3) else "0";
    icmp_ln29_fu_510_p2 <= "1" when (row_0_reg_224 = ap_const_lv2_3) else "0";
    icmp_ln30_fu_553_p2 <= "1" when (col_0_reg_235 = ap_const_lv2_3) else "0";
    icmp_ln39_fu_597_p2 <= "1" when (signed(zext_ln39_fu_593_p1) < signed(input_number_read_reg_981)) else "0";
    icmp_ln40_fu_613_p2 <= "1" when (channel_1_reg_257 = ap_const_lv2_3) else "0";
    icmp_ln41_fu_637_p2 <= "1" when (signed(zext_ln41_fu_633_p1) < signed(input_size_read_reg_987)) else "0";
    icmp_ln42_fu_669_p2 <= "1" when (signed(col_1_reg_279) < signed(input_size_read_reg_987)) else "0";
    icmp_ln56_fu_712_p2 <= "1" when (signed(zext_ln56_fu_708_p1) < signed(input_number_read_reg_981)) else "0";
    icmp_ln57_fu_727_p2 <= "1" when (signed(zext_ln57_fu_723_p1) < signed(filter_number_read_reg_975)) else "0";
    icmp_ln60_fu_768_p2 <= "1" when (signed(zext_ln60_fu_764_p1) < signed(map_boundary_reg_1059)) else "0";
    icmp_ln61_fu_779_p2 <= "1" when (col_2_reg_324 = map_boundary_reg_1059) else "0";
    icmp_ln63_fu_790_p2 <= "1" when (channel_2_reg_336 = ap_const_lv2_3) else "0";
    icmp_ln65_fu_849_p2 <= "1" when (m_0_reg_361 = ap_const_lv2_3) else "0";
    icmp_ln66_fu_919_p2 <= "1" when (n_0_reg_384 = ap_const_lv2_3) else "0";

    input_0_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state16, zext_ln44_1_fu_698_p1, zext_ln67_7_fu_950_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_0_address0 <= zext_ln67_7_fu_950_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_0_address0 <= zext_ln44_1_fu_698_p1(14 - 1 downto 0);
        else 
            input_0_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(stream_input_TVALID, ap_CS_fsm_state9, ap_predicate_op148_read_state9, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (not(((ap_predicate_op148_read_state9 = ap_const_boolean_1) and (stream_input_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_we0_assign_proc : process(stream_input_TVALID, ap_CS_fsm_state9, icmp_ln42_fu_669_p2, tmp_1_nbreadreq_fu_136_p4, ap_predicate_op148_read_state9)
    begin
        if ((not(((ap_predicate_op148_read_state9 = ap_const_boolean_1) and (stream_input_TVALID = ap_const_logic_0))) and (tmp_1_nbreadreq_fu_136_p4 = ap_const_lv1_1) and (icmp_ln42_fu_669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            input_0_we0 <= ap_const_logic_1;
        else 
            input_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_count_fu_717_p2 <= std_logic_vector(unsigned(input_count_0_reg_290) + unsigned(ap_const_lv31_1));
    m_fu_855_p2 <= std_logic_vector(unsigned(m_0_reg_361) + unsigned(ap_const_lv2_1));
    map_boundary_fu_608_p2 <= std_logic_vector(unsigned(input_size_read_reg_987) + unsigned(ap_const_lv32_FFFFFFFE));
    n_fu_925_p2 <= std_logic_vector(unsigned(n_0_reg_384) + unsigned(ap_const_lv2_1));
    p_shl2_cast_fu_539_p3 <= (trunc_ln32_1_fu_535_p1 & ap_const_lv2_0);
    p_shl5_cast_fu_905_p3 <= (trunc_ln67_2_fu_901_p1 & ap_const_lv2_0);
    row_3_fu_773_p2 <= std_logic_vector(unsigned(row_2_reg_312) + unsigned(ap_const_lv31_1));
    row_4_fu_642_p2 <= std_logic_vector(unsigned(row_1_reg_268) + unsigned(ap_const_lv31_1));
    row_fu_516_p2 <= std_logic_vector(unsigned(row_0_reg_224) + unsigned(ap_const_lv2_1));
        sext_ln32_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln32_fu_483_p2),64));

        sext_ln32_2_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_492_p3),64));

        sext_ln32_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln32_fu_452_p2),35));

        sext_ln67_1_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_fu_818_p2),64));

        sext_ln67_2_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_827_p3),64));

        sext_ln67_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln67_fu_754_p2),35));


    stream_filter_TDATA_blk_n_assign_proc : process(stream_filter_TVALID, ap_CS_fsm_state5, icmp_ln30_fu_553_p2, tmp_nbreadreq_fu_118_p4)
    begin
        if (((tmp_nbreadreq_fu_118_p4 = ap_const_lv1_1) and (icmp_ln30_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            stream_filter_TDATA_blk_n <= stream_filter_TVALID;
        else 
            stream_filter_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_filter_TREADY_assign_proc : process(stream_filter_TVALID, ap_CS_fsm_state5, ap_predicate_op104_read_state5)
    begin
        if ((not(((ap_predicate_op104_read_state5 = ap_const_boolean_1) and (stream_filter_TVALID = ap_const_logic_0))) and (ap_predicate_op104_read_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            stream_filter_TREADY <= ap_const_logic_1;
        else 
            stream_filter_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    stream_input_TDATA_blk_n_assign_proc : process(stream_input_TVALID, ap_CS_fsm_state9, icmp_ln42_fu_669_p2, tmp_1_nbreadreq_fu_136_p4)
    begin
        if (((tmp_1_nbreadreq_fu_136_p4 = ap_const_lv1_1) and (icmp_ln42_fu_669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            stream_input_TDATA_blk_n <= stream_input_TVALID;
        else 
            stream_input_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_input_TREADY_assign_proc : process(stream_input_TVALID, ap_CS_fsm_state9, ap_predicate_op148_read_state9)
    begin
        if ((not(((ap_predicate_op148_read_state9 = ap_const_boolean_1) and (stream_input_TVALID = ap_const_logic_0))) and (ap_predicate_op148_read_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            stream_input_TREADY <= ap_const_logic_1;
        else 
            stream_input_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    stream_output_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state14, icmp_ln63_fu_790_p2, ap_CS_fsm_state31, stream_output_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or ((icmp_ln63_fu_790_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            stream_output_TDATA_blk_n <= stream_output_TREADY_int;
        else 
            stream_output_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_output_TLAST_int <= tmp_last_1_fu_96(0);
    stream_output_TVALID <= regslice_both_stream_output_V_data_U_vld_out;

    stream_output_TVALID_int_assign_proc : process(ap_CS_fsm_state14, icmp_ln63_fu_790_p2, ap_block_state14_io)
    begin
        if (((icmp_ln63_fu_790_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state14_io) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            stream_output_TVALID_int <= ap_const_logic_1;
        else 
            stream_output_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln32_1_fu_504_p2 <= std_logic_vector(signed(sext_ln32_2_fu_500_p1) - signed(sext_ln32_1_fu_488_p1));
    sub_ln32_2_fu_547_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_539_p3) - unsigned(trunc_ln32_fu_531_p1));
    sub_ln32_fu_452_p2 <= std_logic_vector(unsigned(zext_ln32_1_fu_448_p1) - unsigned(zext_ln32_fu_436_p1));
    sub_ln67_1_fu_839_p2 <= std_logic_vector(signed(sext_ln67_2_fu_835_p1) - signed(sext_ln67_1_fu_823_p1));
    sub_ln67_2_fu_913_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_905_p3) - unsigned(trunc_ln67_1_fu_897_p1));
    sub_ln67_fu_754_p2 <= std_logic_vector(unsigned(zext_ln67_1_fu_750_p1) - unsigned(zext_ln67_fu_738_p1));
    tmp_13_cast_fu_880_p3 <= (add_ln67_2_fu_875_p2 & ap_const_lv6_0);
    tmp_1_nbreadreq_fu_136_p4 <= (0=>(stream_input_TVALID), others=>'-');
    tmp_2_fu_440_p3 <= (count_0_reg_202 & ap_const_lv2_0);
    tmp_3_fu_492_p3 <= (add_ln32_fu_483_p2 & ap_const_lv2_0);
    tmp_4_fu_827_p3 <= (add_ln67_fu_818_p2 & ap_const_lv2_0);
    tmp_5_fu_625_p3 <= (channel_1_reg_257 & ap_const_lv6_0);
    tmp_8_cast_fu_661_p3 <= (add_ln44_fu_655_p2 & ap_const_lv6_0);
    tmp_9_fu_742_p3 <= (filter_count_0_reg_301 & ap_const_lv2_0);
    tmp_nbreadreq_fu_118_p4 <= (0=>(stream_filter_TVALID), others=>'-');
    tmp_s_fu_806_p3 <= (channel_2_reg_336 & ap_const_lv6_0);
    trunc_ln32_1_fu_535_p1 <= add_ln32_1_fu_526_p2(6 - 1 downto 0);
    trunc_ln32_fu_531_p1 <= add_ln32_1_fu_526_p2(8 - 1 downto 0);
    trunc_ln44_1_fu_689_p1 <= col_1_reg_279(15 - 1 downto 0);
    trunc_ln44_fu_648_p1 <= row_1_reg_268(9 - 1 downto 0);
    trunc_ln67_1_fu_897_p1 <= add_ln67_3_fu_892_p2(8 - 1 downto 0);
    trunc_ln67_2_fu_901_p1 <= add_ln67_3_fu_892_p2(6 - 1 downto 0);
    trunc_ln67_3_fu_935_p1 <= col_2_reg_324(15 - 1 downto 0);
    trunc_ln67_fu_865_p1 <= row_2_reg_312(9 - 1 downto 0);
    zext_ln27_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_0_reg_202),32));
    zext_ln32_1_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_440_p3),34));
    zext_ln32_2_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_0_reg_224),64));
    zext_ln32_3_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_0_reg_213),35));
    zext_ln32_4_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_reg_235),8));
    zext_ln32_5_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_2_fu_578_p2),64));
    zext_ln32_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_0_reg_202),34));
    zext_ln39_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_1_reg_246),32));
    zext_ln41_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_1_reg_268),32));
    zext_ln44_1_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_1_fu_693_p2),64));
    zext_ln44_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1073),9));
    zext_ln56_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_count_0_reg_290),32));
    zext_ln57_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_count_0_reg_301),32));
    zext_ln60_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_2_reg_312),32));
    zext_ln67_1_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_742_p3),34));
    zext_ln67_2_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_361),64));
    zext_ln67_3_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_2_reg_336),35));
    zext_ln67_4_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_806_p3),9));
    zext_ln67_5_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_361),9));
    zext_ln67_6_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_384),15));
    zext_ln67_7_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_5_fu_945_p2),64));
    zext_ln67_8_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_384),8));
    zext_ln67_9_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_6_fu_959_p2),64));
    zext_ln67_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_count_0_reg_301),34));
end behav;
