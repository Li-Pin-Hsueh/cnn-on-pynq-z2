// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2d,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.024000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=5,HLS_SYN_FF=1318,HLS_SYN_LUT=1998,HLS_VERSION=2020_1}" *)

module conv2d (
        ap_clk,
        ap_rst_n,
        stream_kernel_TDATA,
        stream_kernel_TVALID,
        stream_kernel_TREADY,
        stream_kernel_TLAST,
        stream_input_TDATA,
        stream_input_TVALID,
        stream_input_TREADY,
        stream_input_TLAST,
        stream_output_TDATA,
        stream_output_TVALID,
        stream_output_TREADY,
        stream_output_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] stream_kernel_TDATA;
input   stream_kernel_TVALID;
output   stream_kernel_TREADY;
input   stream_kernel_TLAST;
input  [31:0] stream_input_TDATA;
input   stream_input_TVALID;
output   stream_input_TREADY;
input   stream_input_TLAST;
output  [31:0] stream_output_TDATA;
output   stream_output_TVALID;
input   stream_output_TREADY;
output   stream_output_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg stream_kernel_TREADY;
reg stream_input_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] input_row;
wire   [31:0] input_col;
reg    stream_kernel_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln29_fu_371_p2;
reg    stream_input_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln41_fu_447_p2;
reg    stream_output_TDATA_blk_n;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
reg   [31:0] input_col_read_reg_759;
wire    ap_CS_fsm_state1;
reg   [31:0] input_row_read_reg_766;
wire   [1:0] row_4_fu_343_p2;
reg   [1:0] row_4_reg_776;
wire    ap_CS_fsm_state2;
wire   [4:0] sub_ln31_fu_365_p2;
reg   [4:0] sub_ln31_reg_781;
wire   [0:0] icmp_ln28_fu_337_p2;
wire   [1:0] col_fu_377_p2;
reg    ap_block_state3;
wire   [30:0] row_5_fu_415_p2;
reg   [30:0] row_5_reg_800;
wire    ap_CS_fsm_state4;
wire   [13:0] zext_ln43_cast_fu_425_p3;
reg   [13:0] zext_ln43_cast_reg_805;
wire   [0:0] icmp_ln40_fu_410_p2;
wire   [31:0] row_boundary_fu_433_p2;
reg   [31:0] row_boundary_reg_810;
wire   [31:0] col_boundary_fu_438_p2;
reg   [31:0] col_boundary_reg_816;
wire   [30:0] col_4_fu_452_p2;
reg    ap_block_state5;
wire   [30:0] row_fu_490_p2;
reg   [30:0] row_reg_836;
wire    ap_CS_fsm_state6;
wire   [12:0] sub_ln60_fu_520_p2;
reg   [12:0] sub_ln60_reg_841;
wire   [0:0] icmp_ln57_fu_485_p2;
wire   [31:0] add_ln79_fu_526_p2;
reg   [31:0] add_ln79_reg_846;
wire   [31:0] add_ln79_1_fu_531_p2;
reg   [31:0] add_ln79_1_reg_851;
wire   [30:0] col_5_fu_545_p2;
reg   [30:0] col_5_reg_859;
wire    ap_CS_fsm_state7;
reg   [11:0] output_addr_reg_864;
wire   [0:0] icmp_ln58_fu_540_p2;
wire   [1:0] m_fu_571_p2;
reg   [1:0] m_reg_872;
wire    ap_CS_fsm_state8;
wire   [13:0] sext_ln65_cast_fu_591_p3;
reg   [13:0] sext_ln65_cast_reg_877;
wire   [0:0] icmp_ln63_fu_565_p2;
wire   [4:0] sub_ln65_fu_615_p2;
reg   [4:0] sub_ln65_reg_882;
wire   [1:0] n_fu_627_p2;
reg   [1:0] n_reg_890;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln64_fu_621_p2;
wire   [4:0] add_ln65_3_fu_661_p2;
reg   [4:0] add_ln65_3_reg_900;
wire   [31:0] input_q0;
reg   [31:0] input_load_reg_905;
wire    ap_CS_fsm_state10;
wire   [31:0] kernel_q0;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_332_p2;
reg   [31:0] x_reg_920;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_327_p2;
reg   [31:0] tmp_4_reg_925;
wire    ap_CS_fsm_state19;
wire   [30:0] row_6_fu_679_p2;
reg   [30:0] row_6_reg_934;
wire    ap_CS_fsm_state21;
wire    regslice_both_stream_output_V_data_U_apdone_blk;
wire   [0:0] icmp_ln79_fu_685_p2;
reg   [0:0] icmp_ln79_reg_939;
wire   [0:0] icmp_ln76_fu_674_p2;
wire   [12:0] sub_ln84_fu_714_p2;
reg   [12:0] sub_ln84_reg_944;
wire   [30:0] col_6_fu_729_p2;
reg   [30:0] col_6_reg_952;
wire    ap_CS_fsm_state22;
wire   [0:0] tmp_last_fu_740_p2;
reg   [0:0] tmp_last_reg_957;
wire   [0:0] icmp_ln77_fu_724_p2;
wire   [31:0] output_q0;
reg   [11:0] input_address0;
reg    input_ce0;
reg    input_we0;
reg   [3:0] kernel_address0;
reg    kernel_ce0;
reg    kernel_we0;
reg   [11:0] output_address0;
reg    output_ce0;
reg    output_we0;
reg   [31:0] output_d0;
reg   [1:0] row_0_reg_191;
wire   [0:0] tmp_last_1_fu_388_p1;
reg   [1:0] col_0_reg_202;
reg   [30:0] row_1_reg_213;
wire   [0:0] tmp_last_2_fu_463_p1;
reg   [30:0] col_1_reg_224;
reg   [30:0] row_2_reg_235;
reg   [30:0] col_2_reg_247;
reg   [31:0] empty_6_reg_259;
reg   [1:0] m_0_reg_271;
reg   [31:0] empty_8_reg_282;
wire    ap_CS_fsm_state20;
reg   [1:0] n_0_reg_294;
reg   [30:0] row_3_reg_305;
reg   [30:0] col_3_reg_316;
wire  signed [63:0] sext_ln31_fu_401_p1;
wire   [63:0] zext_ln43_fu_476_p1;
wire  signed [63:0] sext_ln60_fu_560_p1;
wire  signed [63:0] sext_ln65_fu_652_p1;
wire  signed [63:0] sext_ln65_1_fu_666_p1;
wire  signed [63:0] sext_ln84_fu_754_p1;
wire    ap_CS_fsm_state15;
wire   [3:0] tmp_fu_353_p3;
wire   [4:0] zext_ln31_1_fu_361_p1;
wire   [4:0] zext_ln31_fu_349_p1;
wire   [4:0] zext_ln31_2_fu_392_p1;
wire   [4:0] add_ln31_fu_396_p2;
wire   [31:0] zext_ln40_fu_406_p1;
wire   [7:0] trunc_ln41_fu_421_p1;
wire   [31:0] zext_ln41_fu_443_p1;
wire   [13:0] trunc_ln43_fu_467_p1;
wire   [13:0] add_ln43_fu_471_p2;
wire   [31:0] zext_ln57_fu_481_p1;
wire   [6:0] trunc_ln60_fu_496_p1;
wire   [11:0] trunc_ln60_1_fu_508_p1;
wire   [12:0] zext_ln60_cast_fu_500_p3;
wire   [12:0] zext_ln60_2_cast_fu_512_p3;
wire   [31:0] zext_ln58_fu_536_p1;
wire   [12:0] trunc_ln60_2_fu_551_p1;
wire   [12:0] add_ln60_fu_555_p2;
wire   [7:0] trunc_ln65_fu_581_p1;
wire   [7:0] zext_ln65_fu_577_p1;
wire   [7:0] add_ln65_fu_585_p2;
wire   [3:0] tmp_8_fu_603_p3;
wire   [4:0] zext_ln65_2_fu_611_p1;
wire   [4:0] zext_ln65_1_fu_599_p1;
wire   [13:0] trunc_ln65_1_fu_637_p1;
wire   [13:0] zext_ln65_3_fu_633_p1;
wire   [13:0] add_ln65_1_fu_641_p2;
wire   [13:0] add_ln65_2_fu_647_p2;
wire   [4:0] zext_ln65_4_fu_657_p1;
wire   [31:0] zext_ln76_fu_670_p1;
wire   [6:0] trunc_ln84_fu_690_p1;
wire   [11:0] trunc_ln84_1_fu_702_p1;
wire   [12:0] zext_ln84_cast_fu_694_p3;
wire   [12:0] zext_ln84_2_cast_fu_706_p3;
wire   [31:0] zext_ln77_fu_720_p1;
wire   [0:0] icmp_ln79_1_fu_735_p2;
wire   [12:0] trunc_ln84_2_fu_745_p1;
wire   [12:0] add_ln84_fu_749_p2;
reg   [23:0] ap_NS_fsm;
wire    regslice_both_stream_kernel_V_data_U_apdone_blk;
wire   [31:0] stream_kernel_TDATA_int;
wire    stream_kernel_TVALID_int;
reg    stream_kernel_TREADY_int;
wire    regslice_both_stream_kernel_V_data_U_ack_in;
wire    regslice_both_w1_stream_kernel_V_last_U_apdone_blk;
wire    stream_kernel_TLAST_int;
wire    regslice_both_w1_stream_kernel_V_last_U_vld_out;
wire    regslice_both_w1_stream_kernel_V_last_U_ack_in;
wire    regslice_both_stream_input_V_data_U_apdone_blk;
wire   [31:0] stream_input_TDATA_int;
wire    stream_input_TVALID_int;
reg    stream_input_TREADY_int;
wire    regslice_both_stream_input_V_data_U_ack_in;
wire    regslice_both_w1_stream_input_V_last_U_apdone_blk;
wire    stream_input_TLAST_int;
wire    regslice_both_w1_stream_input_V_last_U_vld_out;
wire    regslice_both_w1_stream_input_V_last_U_ack_in;
reg    stream_output_TVALID_int;
wire    stream_output_TREADY_int;
wire    regslice_both_stream_output_V_data_U_vld_out;
wire    regslice_both_w1_stream_output_V_last_U_apdone_blk;
wire    stream_output_TLAST_int;
wire    regslice_both_w1_stream_output_V_last_U_ack_in_dummy;
wire    regslice_both_w1_stream_output_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

conv2d_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
conv2d_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_row(input_row),
    .input_col(input_col)
);

conv2d_input #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
input_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_address0),
    .ce0(input_ce0),
    .we0(input_we0),
    .d0(stream_input_TDATA_int),
    .q0(input_q0)
);

conv2d_kernel #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel_address0),
    .ce0(kernel_ce0),
    .we0(kernel_we0),
    .d0(stream_kernel_TDATA_int),
    .q0(kernel_q0)
);

conv2d_output #(
    .DataWidth( 32 ),
    .AddressRange( 3844 ),
    .AddressWidth( 12 ))
output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_address0),
    .ce0(output_ce0),
    .we0(output_we0),
    .d0(output_d0),
    .q0(output_q0)
);

conv2d_fadd_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2d_fadd_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(empty_8_reg_282),
    .din1(x_reg_920),
    .ce(1'b1),
    .dout(grp_fu_327_p2)
);

conv2d_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv2d_fmul_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(input_load_reg_905),
    .din1(kernel_q0),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_stream_kernel_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_kernel_TDATA),
    .vld_in(stream_kernel_TVALID),
    .ack_in(regslice_both_stream_kernel_V_data_U_ack_in),
    .data_out(stream_kernel_TDATA_int),
    .vld_out(stream_kernel_TVALID_int),
    .ack_out(stream_kernel_TREADY_int),
    .apdone_blk(regslice_both_stream_kernel_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_stream_kernel_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_kernel_TLAST),
    .vld_in(stream_kernel_TVALID),
    .ack_in(regslice_both_w1_stream_kernel_V_last_U_ack_in),
    .data_out(stream_kernel_TLAST_int),
    .vld_out(regslice_both_w1_stream_kernel_V_last_U_vld_out),
    .ack_out(stream_kernel_TREADY_int),
    .apdone_blk(regslice_both_w1_stream_kernel_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_stream_input_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_input_TDATA),
    .vld_in(stream_input_TVALID),
    .ack_in(regslice_both_stream_input_V_data_U_ack_in),
    .data_out(stream_input_TDATA_int),
    .vld_out(stream_input_TVALID_int),
    .ack_out(stream_input_TREADY_int),
    .apdone_blk(regslice_both_stream_input_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_stream_input_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_input_TLAST),
    .vld_in(stream_input_TVALID),
    .ack_in(regslice_both_w1_stream_input_V_last_U_ack_in),
    .data_out(stream_input_TLAST_int),
    .vld_out(regslice_both_w1_stream_input_V_last_U_vld_out),
    .ack_out(stream_input_TREADY_int),
    .apdone_blk(regslice_both_w1_stream_input_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_stream_output_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_q0),
    .vld_in(stream_output_TVALID_int),
    .ack_in(stream_output_TREADY_int),
    .data_out(stream_output_TDATA),
    .vld_out(regslice_both_stream_output_V_data_U_vld_out),
    .ack_out(stream_output_TREADY),
    .apdone_blk(regslice_both_stream_output_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_stream_output_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_output_TLAST_int),
    .vld_in(stream_output_TVALID_int),
    .ack_in(regslice_both_w1_stream_output_V_last_U_ack_in_dummy),
    .data_out(stream_output_TLAST),
    .vld_out(regslice_both_w1_stream_output_V_last_U_vld_out),
    .ack_out(stream_output_TREADY),
    .apdone_blk(regslice_both_w1_stream_output_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln29_fu_371_p2 == 1'd0) & (stream_kernel_TVALID_int == 1'b0)) & (tmp_last_1_fu_388_p1 == 1'd0) & (icmp_ln29_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_0_reg_202 <= col_fu_377_p2;
    end else if (((icmp_ln28_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_0_reg_202 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln41_fu_447_p2 == 1'd1) & (stream_input_TVALID_int == 1'b0)) & (icmp_ln41_fu_447_p2 == 1'd1) & (tmp_last_2_fu_463_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        col_1_reg_224 <= col_4_fu_452_p2;
    end else if (((icmp_ln40_fu_410_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        col_1_reg_224 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        col_2_reg_247 <= col_5_reg_859;
    end else if (((icmp_ln57_fu_485_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        col_2_reg_247 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_674_p2 == 1'd1) & (regslice_both_stream_output_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state21))) begin
        col_3_reg_316 <= 31'd0;
    end else if (((stream_output_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        col_3_reg_316 <= col_6_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        empty_6_reg_259 <= empty_8_reg_282;
    end else if (((icmp_ln58_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        empty_6_reg_259 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        empty_8_reg_282 <= empty_6_reg_259;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        empty_8_reg_282 <= tmp_4_reg_925;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_0_reg_271 <= m_reg_872;
    end else if (((icmp_ln58_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        m_0_reg_271 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        n_0_reg_294 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        n_0_reg_294 <= n_reg_890;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln29_fu_371_p2 == 1'd0) & (stream_kernel_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & ((tmp_last_1_fu_388_p1 == 1'd1) | (icmp_ln29_fu_371_p2 == 1'd1)))) begin
        row_0_reg_191 <= row_4_reg_776;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        row_0_reg_191 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_1_reg_213 <= 31'd0;
    end else if ((~((icmp_ln41_fu_447_p2 == 1'd1) & (stream_input_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & ((tmp_last_2_fu_463_p1 == 1'd1) | (icmp_ln41_fu_447_p2 == 1'd0)))) begin
        row_1_reg_213 <= row_5_reg_800;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_540_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        row_2_reg_235 <= row_reg_836;
    end else if (((icmp_ln40_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        row_2_reg_235 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        row_3_reg_305 <= row_6_reg_934;
    end else if (((icmp_ln57_fu_485_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        row_3_reg_305 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_621_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln65_3_reg_900 <= add_ln65_3_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_485_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln79_1_reg_851 <= add_ln79_1_fu_531_p2;
        add_ln79_reg_846 <= add_ln79_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        col_5_reg_859 <= col_5_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        col_6_reg_952 <= col_6_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        col_boundary_reg_816 <= col_boundary_fu_438_p2;
        row_boundary_reg_810 <= row_boundary_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_674_p2 == 1'd1) & (regslice_both_stream_output_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state21))) begin
        icmp_ln79_reg_939 <= icmp_ln79_fu_685_p2;
        sub_ln84_reg_944[12 : 1] <= sub_ln84_fu_714_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        input_col_read_reg_759 <= input_col;
        input_row_read_reg_766 <= input_row;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_load_reg_905 <= input_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_reg_872 <= m_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        n_reg_890 <= n_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        output_addr_reg_864 <= sext_ln60_fu_560_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_4_reg_776 <= row_4_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        row_5_reg_800 <= row_5_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_stream_output_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state21))) begin
        row_6_reg_934 <= row_6_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        row_reg_836 <= row_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sext_ln65_cast_reg_877[13 : 6] <= sext_ln65_cast_fu_591_p3[13 : 6];
        sub_ln65_reg_882 <= sub_ln65_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln31_reg_781 <= sub_ln31_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_485_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln60_reg_841[12 : 1] <= sub_ln60_fu_520_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_4_reg_925 <= grp_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_724_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        tmp_last_reg_957 <= tmp_last_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_reg_920 <= grp_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_410_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln43_cast_reg_805[13 : 6] <= zext_ln43_cast_fu_425_p3[13 : 6];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_address0 = sext_ln65_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_address0 = zext_ln43_fu_476_p1;
    end else begin
        input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (~((icmp_ln41_fu_447_p2 == 1'd1) & (stream_input_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_ce0 = 1'b1;
    end else begin
        input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln41_fu_447_p2 == 1'd1) & (stream_input_TVALID_int == 1'b0)) & (icmp_ln41_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        input_we0 = 1'b1;
    end else begin
        input_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        kernel_address0 = sext_ln65_1_fu_666_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_address0 = sext_ln31_fu_401_p1;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (~((icmp_ln29_fu_371_p2 == 1'd0) & (stream_kernel_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln29_fu_371_p2 == 1'd0) & (stream_kernel_TVALID_int == 1'b0)) & (icmp_ln29_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_we0 = 1'b1;
    end else begin
        kernel_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_address0 = sext_ln84_fu_754_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_address0 = output_addr_reg_864;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_address0 = sext_ln60_fu_560_p1;
    end else begin
        output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state7))) begin
        output_ce0 = 1'b1;
    end else begin
        output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_d0 = tmp_4_reg_925;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_d0 = 32'd0;
    end else begin
        output_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((icmp_ln58_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        output_we0 = 1'b1;
    end else begin
        output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        stream_input_TDATA_blk_n = stream_input_TVALID_int;
    end else begin
        stream_input_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_stream_input_V_data_U_ack_in == 1'b1) & (stream_input_TVALID == 1'b1))) begin
        stream_input_TREADY = 1'b1;
    end else begin
        stream_input_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln41_fu_447_p2 == 1'd1) & (stream_input_TVALID_int == 1'b0)) & (icmp_ln41_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        stream_input_TREADY_int = 1'b1;
    end else begin
        stream_input_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        stream_kernel_TDATA_blk_n = stream_kernel_TVALID_int;
    end else begin
        stream_kernel_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_stream_kernel_V_data_U_ack_in == 1'b1) & (stream_kernel_TVALID == 1'b1))) begin
        stream_kernel_TREADY = 1'b1;
    end else begin
        stream_kernel_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln29_fu_371_p2 == 1'd0) & (stream_kernel_TVALID_int == 1'b0)) & (icmp_ln29_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        stream_kernel_TREADY_int = 1'b1;
    end else begin
        stream_kernel_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        stream_output_TDATA_blk_n = stream_output_TREADY_int;
    end else begin
        stream_output_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((stream_output_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        stream_output_TVALID_int = 1'b1;
    end else begin
        stream_output_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln28_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln29_fu_371_p2 == 1'd0) & (stream_kernel_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & ((tmp_last_1_fu_388_p1 == 1'd1) | (icmp_ln29_fu_371_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln29_fu_371_p2 == 1'd0) & (stream_kernel_TVALID_int == 1'b0)) & (tmp_last_1_fu_388_p1 == 1'd0) & (icmp_ln29_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln40_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln41_fu_447_p2 == 1'd1) & (stream_input_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & ((tmp_last_2_fu_463_p1 == 1'd1) | (icmp_ln41_fu_447_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln41_fu_447_p2 == 1'd1) & (stream_input_TVALID_int == 1'b0)) & (icmp_ln41_fu_447_p2 == 1'd1) & (tmp_last_2_fu_463_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln57_fu_485_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln58_fu_540_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln63_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln64_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln76_fu_674_p2 == 1'd0) & (regslice_both_stream_output_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln76_fu_674_p2 == 1'd1) & (regslice_both_stream_output_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln77_fu_724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((stream_output_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((stream_output_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_fu_396_p2 = (sub_ln31_reg_781 + zext_ln31_2_fu_392_p1);

assign add_ln43_fu_471_p2 = (zext_ln43_cast_reg_805 + trunc_ln43_fu_467_p1);

assign add_ln60_fu_555_p2 = (sub_ln60_reg_841 + trunc_ln60_2_fu_551_p1);

assign add_ln65_1_fu_641_p2 = (trunc_ln65_1_fu_637_p1 + zext_ln65_3_fu_633_p1);

assign add_ln65_2_fu_647_p2 = (add_ln65_1_fu_641_p2 + sext_ln65_cast_reg_877);

assign add_ln65_3_fu_661_p2 = (zext_ln65_4_fu_657_p1 + sub_ln65_reg_882);

assign add_ln65_fu_585_p2 = (trunc_ln65_fu_581_p1 + zext_ln65_fu_577_p1);

assign add_ln79_1_fu_531_p2 = ($signed(input_col_read_reg_759) + $signed(32'd4294967293));

assign add_ln79_fu_526_p2 = ($signed(input_row_read_reg_766) + $signed(32'd4294967293));

assign add_ln84_fu_749_p2 = (sub_ln84_reg_944 + trunc_ln84_2_fu_745_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state3 = ((icmp_ln29_fu_371_p2 == 1'd0) & (stream_kernel_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((icmp_ln41_fu_447_p2 == 1'd1) & (stream_input_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_4_fu_452_p2 = (col_1_reg_224 + 31'd1);

assign col_5_fu_545_p2 = (col_2_reg_247 + 31'd1);

assign col_6_fu_729_p2 = (col_3_reg_316 + 31'd1);

assign col_boundary_fu_438_p2 = ($signed(input_col_read_reg_759) + $signed(32'd4294967294));

assign col_fu_377_p2 = (col_0_reg_202 + 2'd1);

assign icmp_ln28_fu_337_p2 = ((row_0_reg_191 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_371_p2 = ((col_0_reg_202 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_410_p2 = (($signed(zext_ln40_fu_406_p1) < $signed(input_row_read_reg_766)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_447_p2 = (($signed(zext_ln41_fu_443_p1) < $signed(input_col_read_reg_759)) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_485_p2 = (($signed(zext_ln57_fu_481_p1) < $signed(row_boundary_reg_810)) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_540_p2 = (($signed(zext_ln58_fu_536_p1) < $signed(col_boundary_reg_816)) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_565_p2 = ((m_0_reg_271 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_621_p2 = ((n_0_reg_294 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_674_p2 = (($signed(zext_ln76_fu_670_p1) < $signed(row_boundary_reg_810)) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_724_p2 = (($signed(zext_ln77_fu_720_p1) < $signed(col_boundary_reg_816)) ? 1'b1 : 1'b0);

assign icmp_ln79_1_fu_735_p2 = ((zext_ln77_fu_720_p1 == add_ln79_1_reg_851) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_685_p2 = ((zext_ln76_fu_670_p1 == add_ln79_reg_846) ? 1'b1 : 1'b0);

assign m_fu_571_p2 = (m_0_reg_271 + 2'd1);

assign n_fu_627_p2 = (n_0_reg_294 + 2'd1);

assign row_4_fu_343_p2 = (row_0_reg_191 + 2'd1);

assign row_5_fu_415_p2 = (row_1_reg_213 + 31'd1);

assign row_6_fu_679_p2 = (row_3_reg_305 + 31'd1);

assign row_boundary_fu_433_p2 = ($signed(input_row_read_reg_766) + $signed(32'd4294967294));

assign row_fu_490_p2 = (row_2_reg_235 + 31'd1);

assign sext_ln31_fu_401_p1 = $signed(add_ln31_fu_396_p2);

assign sext_ln60_fu_560_p1 = $signed(add_ln60_fu_555_p2);

assign sext_ln65_1_fu_666_p1 = $signed(add_ln65_3_reg_900);

assign sext_ln65_cast_fu_591_p3 = {{add_ln65_fu_585_p2}, {6'd0}};

assign sext_ln65_fu_652_p1 = $signed(add_ln65_2_fu_647_p2);

assign sext_ln84_fu_754_p1 = $signed(add_ln84_fu_749_p2);

assign stream_output_TLAST_int = tmp_last_reg_957;

assign stream_output_TVALID = regslice_both_stream_output_V_data_U_vld_out;

assign sub_ln31_fu_365_p2 = (zext_ln31_1_fu_361_p1 - zext_ln31_fu_349_p1);

assign sub_ln60_fu_520_p2 = (zext_ln60_cast_fu_500_p3 - zext_ln60_2_cast_fu_512_p3);

assign sub_ln65_fu_615_p2 = (zext_ln65_2_fu_611_p1 - zext_ln65_1_fu_599_p1);

assign sub_ln84_fu_714_p2 = (zext_ln84_cast_fu_694_p3 - zext_ln84_2_cast_fu_706_p3);

assign tmp_8_fu_603_p3 = {{m_0_reg_271}, {2'd0}};

assign tmp_fu_353_p3 = {{row_0_reg_191}, {2'd0}};

assign tmp_last_1_fu_388_p1 = stream_kernel_TLAST_int;

assign tmp_last_2_fu_463_p1 = stream_input_TLAST_int;

assign tmp_last_fu_740_p2 = (icmp_ln79_reg_939 & icmp_ln79_1_fu_735_p2);

assign trunc_ln41_fu_421_p1 = row_1_reg_213[7:0];

assign trunc_ln43_fu_467_p1 = col_1_reg_224[13:0];

assign trunc_ln60_1_fu_508_p1 = row_2_reg_235[11:0];

assign trunc_ln60_2_fu_551_p1 = col_2_reg_247[12:0];

assign trunc_ln60_fu_496_p1 = row_2_reg_235[6:0];

assign trunc_ln65_1_fu_637_p1 = col_2_reg_247[13:0];

assign trunc_ln65_fu_581_p1 = row_2_reg_235[7:0];

assign trunc_ln84_1_fu_702_p1 = row_3_reg_305[11:0];

assign trunc_ln84_2_fu_745_p1 = col_3_reg_316[12:0];

assign trunc_ln84_fu_690_p1 = row_3_reg_305[6:0];

assign zext_ln31_1_fu_361_p1 = tmp_fu_353_p3;

assign zext_ln31_2_fu_392_p1 = col_0_reg_202;

assign zext_ln31_fu_349_p1 = row_0_reg_191;

assign zext_ln40_fu_406_p1 = row_1_reg_213;

assign zext_ln41_fu_443_p1 = col_1_reg_224;

assign zext_ln43_cast_fu_425_p3 = {{trunc_ln41_fu_421_p1}, {6'd0}};

assign zext_ln43_fu_476_p1 = add_ln43_fu_471_p2;

assign zext_ln57_fu_481_p1 = row_2_reg_235;

assign zext_ln58_fu_536_p1 = col_2_reg_247;

assign zext_ln60_2_cast_fu_512_p3 = {{trunc_ln60_1_fu_508_p1}, {1'd0}};

assign zext_ln60_cast_fu_500_p3 = {{trunc_ln60_fu_496_p1}, {6'd0}};

assign zext_ln65_1_fu_599_p1 = m_0_reg_271;

assign zext_ln65_2_fu_611_p1 = tmp_8_fu_603_p3;

assign zext_ln65_3_fu_633_p1 = n_0_reg_294;

assign zext_ln65_4_fu_657_p1 = n_0_reg_294;

assign zext_ln65_fu_577_p1 = m_0_reg_271;

assign zext_ln76_fu_670_p1 = row_3_reg_305;

assign zext_ln77_fu_720_p1 = col_3_reg_316;

assign zext_ln84_2_cast_fu_706_p3 = {{trunc_ln84_1_fu_702_p1}, {1'd0}};

assign zext_ln84_cast_fu_694_p3 = {{trunc_ln84_fu_690_p1}, {6'd0}};

always @ (posedge ap_clk) begin
    zext_ln43_cast_reg_805[5:0] <= 6'b000000;
    sub_ln60_reg_841[0] <= 1'b0;
    sext_ln65_cast_reg_877[5:0] <= 6'b000000;
    sub_ln84_reg_944[0] <= 1'b0;
end

endmodule //conv2d
