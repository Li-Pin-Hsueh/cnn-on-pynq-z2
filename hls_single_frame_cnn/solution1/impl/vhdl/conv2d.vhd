-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_kernel_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_kernel_TVALID : IN STD_LOGIC;
    stream_kernel_TREADY : OUT STD_LOGIC;
    stream_kernel_TLAST : IN STD_LOGIC;
    stream_input_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_input_TVALID : IN STD_LOGIC;
    stream_input_TREADY : OUT STD_LOGIC;
    stream_input_TLAST : IN STD_LOGIC;
    stream_output_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_output_TVALID : OUT STD_LOGIC;
    stream_output_TREADY : IN STD_LOGIC;
    stream_output_TLAST : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.024000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=5,HLS_SYN_FF=1318,HLS_SYN_LUT=1998,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal input_row : STD_LOGIC_VECTOR (31 downto 0);
    signal input_col : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_kernel_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln29_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_input_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln41_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_output_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal input_col_read_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_row_read_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_4_fu_343_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_4_reg_776 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln31_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln31_reg_781 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln28_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_377_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal row_5_fu_415_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_5_reg_800 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln43_cast_fu_425_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln43_cast_reg_805 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln40_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_boundary_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_boundary_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_boundary_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_boundary_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_4_fu_452_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal row_fu_490_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_reg_836 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln60_fu_520_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln60_reg_841 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln57_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln79_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln79_1_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln79_1_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_5_fu_545_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_5_reg_859 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal output_addr_reg_864 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln58_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_571_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_reg_872 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln65_cast_fu_591_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln65_cast_reg_877 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln63_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln65_fu_615_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln65_reg_882 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_fu_627_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_reg_890 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln64_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln65_3_fu_661_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln65_3_reg_900 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal kernel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal row_6_fu_679_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_6_reg_934 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal regslice_both_stream_output_V_data_U_apdone_blk : STD_LOGIC;
    signal icmp_ln79_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_939 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln84_fu_714_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln84_reg_944 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_6_fu_729_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_6_reg_952 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_last_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_ce0 : STD_LOGIC;
    signal input_we0 : STD_LOGIC;
    signal kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_ce0 : STD_LOGIC;
    signal kernel_we0 : STD_LOGIC;
    signal output_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal output_ce0 : STD_LOGIC;
    signal output_we0 : STD_LOGIC;
    signal output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_0_reg_191 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_last_1_fu_388_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_0_reg_202 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_1_reg_213 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_last_2_fu_463_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_reg_224 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_2_reg_235 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_2_reg_247 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_6_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_0_reg_271 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_8_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal n_0_reg_294 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_3_reg_305 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_3_reg_316 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln31_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln60_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln65_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln65_1_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln84_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_fu_353_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_1_fu_361_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_fu_349_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_2_fu_392_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_fu_396_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln41_fu_421_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln41_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln43_fu_467_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln43_fu_471_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln57_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln60_fu_496_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln60_1_fu_508_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln60_cast_fu_500_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln60_2_cast_fu_512_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln58_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln60_2_fu_551_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln60_fu_555_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln65_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln65_fu_577_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_603_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln65_2_fu_611_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln65_1_fu_599_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln65_1_fu_637_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln65_3_fu_633_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln65_1_fu_641_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln65_2_fu_647_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln65_4_fu_657_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_fu_670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln84_fu_690_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln84_1_fu_702_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_cast_fu_694_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln84_2_cast_fu_706_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln77_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln79_1_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln84_2_fu_745_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln84_fu_749_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal regslice_both_stream_kernel_V_data_U_apdone_blk : STD_LOGIC;
    signal stream_kernel_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_kernel_TVALID_int : STD_LOGIC;
    signal stream_kernel_TREADY_int : STD_LOGIC;
    signal regslice_both_stream_kernel_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_stream_kernel_V_last_U_apdone_blk : STD_LOGIC;
    signal stream_kernel_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_stream_kernel_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_stream_kernel_V_last_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_input_V_data_U_apdone_blk : STD_LOGIC;
    signal stream_input_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_input_TVALID_int : STD_LOGIC;
    signal stream_input_TREADY_int : STD_LOGIC;
    signal regslice_both_stream_input_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_stream_input_V_last_U_apdone_blk : STD_LOGIC;
    signal stream_input_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_stream_input_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_stream_input_V_last_U_ack_in : STD_LOGIC;
    signal stream_output_TVALID_int : STD_LOGIC;
    signal stream_output_TREADY_int : STD_LOGIC;
    signal regslice_both_stream_output_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_stream_output_V_last_U_apdone_blk : STD_LOGIC;
    signal stream_output_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_stream_output_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_stream_output_V_last_U_vld_out : STD_LOGIC;

    component conv2d_fadd_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_fmul_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_kernel IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_row : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_col : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    conv2d_AXILiteS_s_axi_U : component conv2d_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_row => input_row,
        input_col => input_col);

    input_U : component conv2d_input
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_address0,
        ce0 => input_ce0,
        we0 => input_we0,
        d0 => stream_input_TDATA_int,
        q0 => input_q0);

    kernel_U : component conv2d_kernel
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => kernel_address0,
        ce0 => kernel_ce0,
        we0 => kernel_we0,
        d0 => stream_kernel_TDATA_int,
        q0 => kernel_q0);

    output_U : component conv2d_output
    generic map (
        DataWidth => 32,
        AddressRange => 3844,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_address0,
        ce0 => output_ce0,
        we0 => output_we0,
        d0 => output_d0,
        q0 => output_q0);

    conv2d_fadd_32ns_bkb_U1 : component conv2d_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => empty_8_reg_282,
        din1 => x_reg_920,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    conv2d_fmul_32ns_cud_U2 : component conv2d_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input_load_reg_905,
        din1 => kernel_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    regslice_both_stream_kernel_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_kernel_TDATA,
        vld_in => stream_kernel_TVALID,
        ack_in => regslice_both_stream_kernel_V_data_U_ack_in,
        data_out => stream_kernel_TDATA_int,
        vld_out => stream_kernel_TVALID_int,
        ack_out => stream_kernel_TREADY_int,
        apdone_blk => regslice_both_stream_kernel_V_data_U_apdone_blk);

    regslice_both_w1_stream_kernel_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_kernel_TLAST,
        vld_in => stream_kernel_TVALID,
        ack_in => regslice_both_w1_stream_kernel_V_last_U_ack_in,
        data_out => stream_kernel_TLAST_int,
        vld_out => regslice_both_w1_stream_kernel_V_last_U_vld_out,
        ack_out => stream_kernel_TREADY_int,
        apdone_blk => regslice_both_w1_stream_kernel_V_last_U_apdone_blk);

    regslice_both_stream_input_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_input_TDATA,
        vld_in => stream_input_TVALID,
        ack_in => regslice_both_stream_input_V_data_U_ack_in,
        data_out => stream_input_TDATA_int,
        vld_out => stream_input_TVALID_int,
        ack_out => stream_input_TREADY_int,
        apdone_blk => regslice_both_stream_input_V_data_U_apdone_blk);

    regslice_both_w1_stream_input_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_input_TLAST,
        vld_in => stream_input_TVALID,
        ack_in => regslice_both_w1_stream_input_V_last_U_ack_in,
        data_out => stream_input_TLAST_int,
        vld_out => regslice_both_w1_stream_input_V_last_U_vld_out,
        ack_out => stream_input_TREADY_int,
        apdone_blk => regslice_both_w1_stream_input_V_last_U_apdone_blk);

    regslice_both_stream_output_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_q0,
        vld_in => stream_output_TVALID_int,
        ack_in => stream_output_TREADY_int,
        data_out => stream_output_TDATA,
        vld_out => regslice_both_stream_output_V_data_U_vld_out,
        ack_out => stream_output_TREADY,
        apdone_blk => regslice_both_stream_output_V_data_U_apdone_blk);

    regslice_both_w1_stream_output_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_output_TLAST_int,
        vld_in => stream_output_TVALID_int,
        ack_in => regslice_both_w1_stream_output_V_last_U_ack_in_dummy,
        data_out => stream_output_TLAST,
        vld_out => regslice_both_w1_stream_output_V_last_U_vld_out,
        ack_out => stream_output_TREADY,
        apdone_blk => regslice_both_w1_stream_output_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (stream_kernel_TVALID_int = ap_const_logic_0))) and (tmp_last_1_fu_388_p1 = ap_const_lv1_0) and (icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                col_0_reg_202 <= col_fu_377_p2;
            elsif (((icmp_ln28_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_0_reg_202 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    col_1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (stream_input_TVALID_int = ap_const_logic_0))) and (icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (tmp_last_2_fu_463_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                col_1_reg_224 <= col_4_fu_452_p2;
            elsif (((icmp_ln40_fu_410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_1_reg_224 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    col_2_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                col_2_reg_247 <= col_5_reg_859;
            elsif (((icmp_ln57_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                col_2_reg_247 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    col_3_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_674_p2 = ap_const_lv1_1) and (regslice_both_stream_output_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                col_3_reg_316 <= ap_const_lv31_0;
            elsif (((stream_output_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                col_3_reg_316 <= col_6_reg_952;
            end if; 
        end if;
    end process;

    empty_6_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                empty_6_reg_259 <= empty_8_reg_282;
            elsif (((icmp_ln58_fu_540_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                empty_6_reg_259 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    empty_8_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                empty_8_reg_282 <= empty_6_reg_259;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                empty_8_reg_282 <= tmp_4_reg_925;
            end if; 
        end if;
    end process;

    m_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                m_0_reg_271 <= m_reg_872;
            elsif (((icmp_ln58_fu_540_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                m_0_reg_271 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_0_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                n_0_reg_294 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                n_0_reg_294 <= n_reg_890;
            end if; 
        end if;
    end process;

    row_0_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (stream_kernel_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_last_1_fu_388_p1 = ap_const_lv1_1) or (icmp_ln29_fu_371_p2 = ap_const_lv1_1)))) then 
                row_0_reg_191 <= row_4_reg_776;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                row_0_reg_191 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    row_1_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_1_reg_213 <= ap_const_lv31_0;
            elsif ((not(((icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (stream_input_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_last_2_fu_463_p1 = ap_const_lv1_1) or (icmp_ln41_fu_447_p2 = ap_const_lv1_0)))) then 
                row_1_reg_213 <= row_5_reg_800;
            end if; 
        end if;
    end process;

    row_2_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_540_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                row_2_reg_235 <= row_reg_836;
            elsif (((icmp_ln40_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_2_reg_235 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    row_3_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_724_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                row_3_reg_305 <= row_6_reg_934;
            elsif (((icmp_ln57_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                row_3_reg_305 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_621_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln65_3_reg_900 <= add_ln65_3_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln79_1_reg_851 <= add_ln79_1_fu_531_p2;
                add_ln79_reg_846 <= add_ln79_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                col_5_reg_859 <= col_5_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                col_6_reg_952 <= col_6_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                col_boundary_reg_816 <= col_boundary_fu_438_p2;
                row_boundary_reg_810 <= row_boundary_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_674_p2 = ap_const_lv1_1) and (regslice_both_stream_output_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                icmp_ln79_reg_939 <= icmp_ln79_fu_685_p2;
                    sub_ln84_reg_944(12 downto 1) <= sub_ln84_fu_714_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                input_col_read_reg_759 <= input_col;
                input_row_read_reg_766 <= input_row;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_reg_905 <= input_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                m_reg_872 <= m_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                n_reg_890 <= n_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_540_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                output_addr_reg_864 <= sext_ln60_fu_560_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_4_reg_776 <= row_4_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                row_5_reg_800 <= row_5_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_stream_output_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                row_6_reg_934 <= row_6_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                row_reg_836 <= row_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    sext_ln65_cast_reg_877(13 downto 6) <= sext_ln65_cast_fu_591_p3(13 downto 6);
                sub_ln65_reg_882 <= sub_ln65_fu_615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln31_reg_781 <= sub_ln31_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln60_reg_841(12 downto 1) <= sub_ln60_fu_520_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_4_reg_925 <= grp_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_724_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                tmp_last_reg_957 <= tmp_last_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                x_reg_920 <= grp_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln43_cast_reg_805(13 downto 6) <= zext_ln43_cast_fu_425_p3(13 downto 6);
            end if;
        end if;
    end process;
    zext_ln43_cast_reg_805(5 downto 0) <= "000000";
    sub_ln60_reg_841(0) <= '0';
    sext_ln65_cast_reg_877(5 downto 0) <= "000000";
    sub_ln84_reg_944(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, icmp_ln29_fu_371_p2, ap_CS_fsm_state5, icmp_ln41_fu_447_p2, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state2, icmp_ln28_fu_337_p2, ap_CS_fsm_state4, icmp_ln40_fu_410_p2, ap_CS_fsm_state6, icmp_ln57_fu_485_p2, ap_CS_fsm_state7, icmp_ln58_fu_540_p2, ap_CS_fsm_state8, icmp_ln63_fu_565_p2, ap_CS_fsm_state9, icmp_ln64_fu_621_p2, ap_CS_fsm_state21, regslice_both_stream_output_V_data_U_apdone_blk, icmp_ln76_fu_674_p2, ap_CS_fsm_state22, icmp_ln77_fu_724_p2, tmp_last_1_fu_388_p1, tmp_last_2_fu_463_p1, stream_kernel_TVALID_int, stream_input_TVALID_int, stream_output_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln28_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (stream_kernel_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_last_1_fu_388_p1 = ap_const_lv1_1) or (icmp_ln29_fu_371_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (stream_kernel_TVALID_int = ap_const_logic_0))) and (tmp_last_1_fu_388_p1 = ap_const_lv1_0) and (icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln40_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (stream_input_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_last_2_fu_463_p1 = ap_const_lv1_1) or (icmp_ln41_fu_447_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (stream_input_TVALID_int = ap_const_logic_0))) and (icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (tmp_last_2_fu_463_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln57_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln58_fu_540_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln63_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln64_fu_621_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln76_fu_674_p2 = ap_const_lv1_0) and (regslice_both_stream_output_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln76_fu_674_p2 = ap_const_lv1_1) and (regslice_both_stream_output_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln77_fu_724_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((stream_output_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((stream_output_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_fu_396_p2 <= std_logic_vector(unsigned(sub_ln31_reg_781) + unsigned(zext_ln31_2_fu_392_p1));
    add_ln43_fu_471_p2 <= std_logic_vector(unsigned(zext_ln43_cast_reg_805) + unsigned(trunc_ln43_fu_467_p1));
    add_ln60_fu_555_p2 <= std_logic_vector(unsigned(sub_ln60_reg_841) + unsigned(trunc_ln60_2_fu_551_p1));
    add_ln65_1_fu_641_p2 <= std_logic_vector(unsigned(trunc_ln65_1_fu_637_p1) + unsigned(zext_ln65_3_fu_633_p1));
    add_ln65_2_fu_647_p2 <= std_logic_vector(unsigned(add_ln65_1_fu_641_p2) + unsigned(sext_ln65_cast_reg_877));
    add_ln65_3_fu_661_p2 <= std_logic_vector(unsigned(zext_ln65_4_fu_657_p1) + unsigned(sub_ln65_reg_882));
    add_ln65_fu_585_p2 <= std_logic_vector(unsigned(trunc_ln65_fu_581_p1) + unsigned(zext_ln65_fu_577_p1));
    add_ln79_1_fu_531_p2 <= std_logic_vector(unsigned(input_col_read_reg_759) + unsigned(ap_const_lv32_FFFFFFFD));
    add_ln79_fu_526_p2 <= std_logic_vector(unsigned(input_row_read_reg_766) + unsigned(ap_const_lv32_FFFFFFFD));
    add_ln84_fu_749_p2 <= std_logic_vector(unsigned(sub_ln84_reg_944) + unsigned(trunc_ln84_2_fu_745_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state3_assign_proc : process(icmp_ln29_fu_371_p2, stream_kernel_TVALID_int)
    begin
                ap_block_state3 <= ((icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (stream_kernel_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(icmp_ln41_fu_447_p2, stream_input_TVALID_int)
    begin
                ap_block_state5 <= ((icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (stream_input_TVALID_int = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_4_fu_452_p2 <= std_logic_vector(unsigned(col_1_reg_224) + unsigned(ap_const_lv31_1));
    col_5_fu_545_p2 <= std_logic_vector(unsigned(col_2_reg_247) + unsigned(ap_const_lv31_1));
    col_6_fu_729_p2 <= std_logic_vector(unsigned(col_3_reg_316) + unsigned(ap_const_lv31_1));
    col_boundary_fu_438_p2 <= std_logic_vector(unsigned(input_col_read_reg_759) + unsigned(ap_const_lv32_FFFFFFFE));
    col_fu_377_p2 <= std_logic_vector(unsigned(col_0_reg_202) + unsigned(ap_const_lv2_1));
    icmp_ln28_fu_337_p2 <= "1" when (row_0_reg_191 = ap_const_lv2_3) else "0";
    icmp_ln29_fu_371_p2 <= "1" when (col_0_reg_202 = ap_const_lv2_3) else "0";
    icmp_ln40_fu_410_p2 <= "1" when (signed(zext_ln40_fu_406_p1) < signed(input_row_read_reg_766)) else "0";
    icmp_ln41_fu_447_p2 <= "1" when (signed(zext_ln41_fu_443_p1) < signed(input_col_read_reg_759)) else "0";
    icmp_ln57_fu_485_p2 <= "1" when (signed(zext_ln57_fu_481_p1) < signed(row_boundary_reg_810)) else "0";
    icmp_ln58_fu_540_p2 <= "1" when (signed(zext_ln58_fu_536_p1) < signed(col_boundary_reg_816)) else "0";
    icmp_ln63_fu_565_p2 <= "1" when (m_0_reg_271 = ap_const_lv2_3) else "0";
    icmp_ln64_fu_621_p2 <= "1" when (n_0_reg_294 = ap_const_lv2_3) else "0";
    icmp_ln76_fu_674_p2 <= "1" when (signed(zext_ln76_fu_670_p1) < signed(row_boundary_reg_810)) else "0";
    icmp_ln77_fu_724_p2 <= "1" when (signed(zext_ln77_fu_720_p1) < signed(col_boundary_reg_816)) else "0";
    icmp_ln79_1_fu_735_p2 <= "1" when (zext_ln77_fu_720_p1 = add_ln79_1_reg_851) else "0";
    icmp_ln79_fu_685_p2 <= "1" when (zext_ln76_fu_670_p1 = add_ln79_reg_846) else "0";

    input_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, zext_ln43_fu_476_p1, sext_ln65_fu_652_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_address0 <= sext_ln65_fu_652_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_address0 <= zext_ln43_fu_476_p1(12 - 1 downto 0);
        else 
            input_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_ce0_assign_proc : process(ap_CS_fsm_state5, icmp_ln41_fu_447_p2, ap_CS_fsm_state9, stream_input_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (not(((icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (stream_input_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            input_ce0 <= ap_const_logic_1;
        else 
            input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln41_fu_447_p2, stream_input_TVALID_int)
    begin
        if ((not(((icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (stream_input_TVALID_int = ap_const_logic_0))) and (icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            input_we0 <= ap_const_logic_1;
        else 
            input_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, sext_ln31_fu_401_p1, sext_ln65_1_fu_666_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_address0 <= sext_ln65_1_fu_666_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address0 <= sext_ln31_fu_401_p1(4 - 1 downto 0);
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln29_fu_371_p2, ap_CS_fsm_state10, stream_kernel_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (stream_kernel_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln29_fu_371_p2, stream_kernel_TVALID_int)
    begin
        if ((not(((icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (stream_kernel_TVALID_int = ap_const_logic_0))) and (icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            kernel_we0 <= ap_const_logic_1;
        else 
            kernel_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_571_p2 <= std_logic_vector(unsigned(m_0_reg_271) + unsigned(ap_const_lv2_1));
    n_fu_627_p2 <= std_logic_vector(unsigned(n_0_reg_294) + unsigned(ap_const_lv2_1));

    output_address0_assign_proc : process(ap_CS_fsm_state7, output_addr_reg_864, ap_CS_fsm_state22, ap_CS_fsm_state20, sext_ln60_fu_560_p1, sext_ln84_fu_754_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_address0 <= sext_ln84_fu_754_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_address0 <= output_addr_reg_864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_address0 <= sext_ln60_fu_560_p1(12 - 1 downto 0);
        else 
            output_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state22, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_ce0 <= ap_const_logic_1;
        else 
            output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_d0_assign_proc : process(ap_CS_fsm_state7, tmp_4_reg_925, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_d0 <= tmp_4_reg_925;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_d0 <= ap_const_lv32_0;
        else 
            output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln58_fu_540_p2, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln58_fu_540_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            output_we0 <= ap_const_logic_1;
        else 
            output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_4_fu_343_p2 <= std_logic_vector(unsigned(row_0_reg_191) + unsigned(ap_const_lv2_1));
    row_5_fu_415_p2 <= std_logic_vector(unsigned(row_1_reg_213) + unsigned(ap_const_lv31_1));
    row_6_fu_679_p2 <= std_logic_vector(unsigned(row_3_reg_305) + unsigned(ap_const_lv31_1));
    row_boundary_fu_433_p2 <= std_logic_vector(unsigned(input_row_read_reg_766) + unsigned(ap_const_lv32_FFFFFFFE));
    row_fu_490_p2 <= std_logic_vector(unsigned(row_2_reg_235) + unsigned(ap_const_lv31_1));
        sext_ln31_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln31_fu_396_p2),64));

        sext_ln60_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_fu_555_p2),64));

        sext_ln65_1_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln65_3_reg_900),64));

    sext_ln65_cast_fu_591_p3 <= (add_ln65_fu_585_p2 & ap_const_lv6_0);
        sext_ln65_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln65_2_fu_647_p2),64));

        sext_ln84_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln84_fu_749_p2),64));


    stream_input_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state5, icmp_ln41_fu_447_p2, stream_input_TVALID_int)
    begin
        if (((icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            stream_input_TDATA_blk_n <= stream_input_TVALID_int;
        else 
            stream_input_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_input_TREADY_assign_proc : process(stream_input_TVALID, regslice_both_stream_input_V_data_U_ack_in)
    begin
        if (((regslice_both_stream_input_V_data_U_ack_in = ap_const_logic_1) and (stream_input_TVALID = ap_const_logic_1))) then 
            stream_input_TREADY <= ap_const_logic_1;
        else 
            stream_input_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    stream_input_TREADY_int_assign_proc : process(ap_CS_fsm_state5, icmp_ln41_fu_447_p2, stream_input_TVALID_int)
    begin
        if ((not(((icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (stream_input_TVALID_int = ap_const_logic_0))) and (icmp_ln41_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            stream_input_TREADY_int <= ap_const_logic_1;
        else 
            stream_input_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    stream_kernel_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln29_fu_371_p2, stream_kernel_TVALID_int)
    begin
        if (((icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stream_kernel_TDATA_blk_n <= stream_kernel_TVALID_int;
        else 
            stream_kernel_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_kernel_TREADY_assign_proc : process(stream_kernel_TVALID, regslice_both_stream_kernel_V_data_U_ack_in)
    begin
        if (((regslice_both_stream_kernel_V_data_U_ack_in = ap_const_logic_1) and (stream_kernel_TVALID = ap_const_logic_1))) then 
            stream_kernel_TREADY <= ap_const_logic_1;
        else 
            stream_kernel_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    stream_kernel_TREADY_int_assign_proc : process(ap_CS_fsm_state3, icmp_ln29_fu_371_p2, stream_kernel_TVALID_int)
    begin
        if ((not(((icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (stream_kernel_TVALID_int = ap_const_logic_0))) and (icmp_ln29_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stream_kernel_TREADY_int <= ap_const_logic_1;
        else 
            stream_kernel_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    stream_output_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state24, stream_output_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            stream_output_TDATA_blk_n <= stream_output_TREADY_int;
        else 
            stream_output_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_output_TLAST_int <= tmp_last_reg_957(0);
    stream_output_TVALID <= regslice_both_stream_output_V_data_U_vld_out;

    stream_output_TVALID_int_assign_proc : process(ap_CS_fsm_state23, stream_output_TREADY_int)
    begin
        if (((stream_output_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            stream_output_TVALID_int <= ap_const_logic_1;
        else 
            stream_output_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln31_fu_365_p2 <= std_logic_vector(unsigned(zext_ln31_1_fu_361_p1) - unsigned(zext_ln31_fu_349_p1));
    sub_ln60_fu_520_p2 <= std_logic_vector(unsigned(zext_ln60_cast_fu_500_p3) - unsigned(zext_ln60_2_cast_fu_512_p3));
    sub_ln65_fu_615_p2 <= std_logic_vector(unsigned(zext_ln65_2_fu_611_p1) - unsigned(zext_ln65_1_fu_599_p1));
    sub_ln84_fu_714_p2 <= std_logic_vector(unsigned(zext_ln84_cast_fu_694_p3) - unsigned(zext_ln84_2_cast_fu_706_p3));
    tmp_8_fu_603_p3 <= (m_0_reg_271 & ap_const_lv2_0);
    tmp_fu_353_p3 <= (row_0_reg_191 & ap_const_lv2_0);
    tmp_last_1_fu_388_p1 <= (0=>stream_kernel_TLAST_int, others=>'-');
    tmp_last_2_fu_463_p1 <= (0=>stream_input_TLAST_int, others=>'-');
    tmp_last_fu_740_p2 <= (icmp_ln79_reg_939 and icmp_ln79_1_fu_735_p2);
    trunc_ln41_fu_421_p1 <= row_1_reg_213(8 - 1 downto 0);
    trunc_ln43_fu_467_p1 <= col_1_reg_224(14 - 1 downto 0);
    trunc_ln60_1_fu_508_p1 <= row_2_reg_235(12 - 1 downto 0);
    trunc_ln60_2_fu_551_p1 <= col_2_reg_247(13 - 1 downto 0);
    trunc_ln60_fu_496_p1 <= row_2_reg_235(7 - 1 downto 0);
    trunc_ln65_1_fu_637_p1 <= col_2_reg_247(14 - 1 downto 0);
    trunc_ln65_fu_581_p1 <= row_2_reg_235(8 - 1 downto 0);
    trunc_ln84_1_fu_702_p1 <= row_3_reg_305(12 - 1 downto 0);
    trunc_ln84_2_fu_745_p1 <= col_3_reg_316(13 - 1 downto 0);
    trunc_ln84_fu_690_p1 <= row_3_reg_305(7 - 1 downto 0);
    zext_ln31_1_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_353_p3),5));
    zext_ln31_2_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_reg_202),5));
    zext_ln31_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_0_reg_191),5));
    zext_ln40_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_1_reg_213),32));
    zext_ln41_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_1_reg_224),32));
    zext_ln43_cast_fu_425_p3 <= (trunc_ln41_fu_421_p1 & ap_const_lv6_0);
    zext_ln43_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_471_p2),64));
    zext_ln57_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_2_reg_235),32));
    zext_ln58_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_2_reg_247),32));
    zext_ln60_2_cast_fu_512_p3 <= (trunc_ln60_1_fu_508_p1 & ap_const_lv1_0);
    zext_ln60_cast_fu_500_p3 <= (trunc_ln60_fu_496_p1 & ap_const_lv6_0);
    zext_ln65_1_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_271),5));
    zext_ln65_2_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_603_p3),5));
    zext_ln65_3_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_294),14));
    zext_ln65_4_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_294),5));
    zext_ln65_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_271),8));
    zext_ln76_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_3_reg_305),32));
    zext_ln77_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_3_reg_316),32));
    zext_ln84_2_cast_fu_706_p3 <= (trunc_ln84_1_fu_702_p1 & ap_const_lv1_0);
    zext_ln84_cast_fu_694_p3 <= (trunc_ln84_fu_690_p1 & ap_const_lv6_0);
end behav;
